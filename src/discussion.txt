

A. opt/ restructuring; removing solver interface; data struct
1. Non-class methods in TaoInterfaceLandfill need to be revisited, cleaned up, and if possible combined with existing methods in TaoInterface
2. In opt/ file includes, member function definitions (virtual vs non-virtual etc need to be fixed and reviewed. I’ll do that
3. In Solver, I hope all occurrences of solver_interface are fixed but not sure; Solver should have it’s own .cpp file; all remaining methods from TumorSolverInterface (which are needed) should be moved to Solver.cpp;
4. In Solver.cpp, the allocation of p_vec_ needs to be fixed; quick and dirty I’ve been re-allocating in the run() methods if required; we should find a better way of allocating p_vec_ once and for all in specialized initialize of solvers. This is necessary since optimizer now has a function setInitialGuess which assumes a specific length of the vector (for RD and ME TIL can be given as Phi(p) or c(0))
5. In derivative operators: all Vec data has to be replaced by std::shared_ptr<Data> data, all data access by data->dt1(), all obs_->apply(..) by  bs_->apply(.., 1); the latter is for clarity, time point one is the default.
6. Fixing many compile errors
7. Fixing many runtime errors

B. Other remaining TODOs
1. create directories and move files as indicated in discussion.txt, we should have directories cuda/, test/, opt/, pde/, utils/, mat/, and maybe solver/
2. derivative operators: a generic FD model should be provided, which works for mass effect and alzh, maybe we should split up derivative operators
3. Test suite
4. remaining todos in discussion.txt and TODO.md
5. Minimal documentation
6. python scripts for grid-cont, forward, etc which process the data and do everything (also have to implement functionality to read in segmentation, i.e., split up into tissues)
7. clean up in scripts/



### A. Misc ###

 0. rename Cuda --> cuda
 1. create directory utils, move Utils, IO, Interp to utils

### B. MaterialProperties ###

0. create directory mat/
1. DiffCoeff --> DiffusionCoefficient, ReacCoeff --> ReactionCoefficient
2. move MaterialProperties, DiffusionCoefficient, ReactionCoefficient, Phi to mat/


### C. PdeSolvers ###

0. create directory pde/
1. DiffSolver --> DiffusionSolver, also create ReactionSolver
2. move DiffusionSolver, ReactionSOlver, ElasticitySolver, AdvectionSolver to pde/


### D. Optimizer ###

0. create a directory opt/

Then, we have two options:

1. Inheritance based approach:
  * class Optimizer, classes TILOptimizer, RDOptimizer, MEOptimizer, SparseTILOptimizer derive from super class
  * each of them has methods initialize(), allocateTaoObjects(), setTaoOptions(), solve()
  * each of them has non class methods in their files for evaluateObjective(), evaluateGradient(), evaluateObjectiveAndGradient(), optimizationMonitor(), convergenceGrad(), etc.. plus if applicable Hessian methods
  * each of them defines the # of DOFs it inverts for (we can discuss whether or not it makes sense to combine RD and ME in this regard)
  * since SparseTILOptimizer needs RDOptimizer::solve and TILOptimizer::solve, it has to have these two solvers as members.

2. Composition based approach:
  * class Optimizer, files   TILOptimizer, RDOptimizer, MEOptimizer, SparseTILOptimizer
  * we put the corresponding methods for initialization and inversion in the files, also non-class methods
  * all of the special Optimizer files are included in Optimizer
  * Optimizer has functions solveTIL(), solveSparseTIL(), solveRD(), solveME()
